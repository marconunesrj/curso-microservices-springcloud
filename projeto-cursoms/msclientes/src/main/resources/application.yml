spring:
  application:
    name: msclientes
  datasource:
#    url: jdbc:h2:mem:Testdb
    # Caso não exista o banco deve-se retirar IFEXISTS=TRUE
#    url: jdbc:h2:file:C:/Cursos/domine_microservicos_mensageria_spring_cloud_docker/curso-microservices-springcloud/db/testdb;DB_CLOSE_ON_EXIT=FALSE;IFEXISTS=TRUE;AUTO_RECONNECT=TRUE;DB_CLOSE_DELAY=-1;
    url: jdbc:h2:file:C:/Cursos/domine_microservicos_mensageria_spring_cloud_docker/curso-microservices-springcloud/db/testdb;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;DEFAULT_NULL_ORDERING=HIGH;AUTO_SERVER=TRUE
    username: sa
    password:
    driverClassName: org.h2.Driver
    initialization-mode: always
  h2:
    console:
      enabled: true
    path: /h2-console
#    settings:
#      trace: false
#      web-allow-others: false
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    defer-datasource-initialization: true
    open-in-view: false
    hibernate:
      ddl-auto: update
server:
  port: 0  # Faz a aplicação subir em uma porta aleatória

eureka:
  client:
    service-url:   # http://<usuario>:<senha>@<url>:<porta>/eureka
      defaultZone: http://cursoms-eureka-user:ecok-usr-eeuramssur@localhost:8761/eureka  # Onde está o servidor Eureka
  instance:      #<spring.application.name>:<rash-randômico>
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}  # Como será registrado no Eureka server

management:
  endpoints:
    web:
      exposure:
        include: '*'

logging:
  file:
    name: ./logs/log-file.log

